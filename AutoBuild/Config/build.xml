<?xml version="1.0" encoding="UTF-8"?>
<project name="build" default="main" basedir="." >
  <taskdef resource="net/sf/antcontrib/antlib.xml" />
  <property environment="env"/>
  <property name="RAW_BUILD_NUMBER" value="${env.BUILD_NUMBER}"/>
  <script language="javascript"><![CDATA[
    var buildNum = parseInt(project.getProperty("RAW_BUILD_NUMBER"))
    var minorBuildNumber = buildNum % 100;
    var majorBuildNumber = (Math.floor(buildNum / 100)) % 100;
    var uberBuildNumber = (Math.floor(buildNum / 10000)) % 100;
    project.setProperty("minorBuildNumber", minorBuildNumber);
    project.setProperty("majorBuildNumber", majorBuildNumber);
    project.setProperty("uberBuildNumber", uberBuildNumber);
  ]]>
  </script>
  <property name="VERSION_STRING" value="${uberBuildNumber}.${majorBuildNumber}.${minorBuildNumber}"/>
  <property file="settings.properties"/>
  <property name="dev.dir.absolute" location="${dev.dir}"/>
  <tstamp>
    <format property="TODAY_STAMP" pattern="yyyy_MM_dd" locale="en,US"/>
  </tstamp>
  <tstamp>
    <format property="MONTH_STAMP" pattern="M" locale="en,US"/>
  </tstamp>
  <property name="VERSION_NUM" value="${uberBuildNumber}.${majorBuildNumber}.${minorBuildNumber}"/>
  <property name="VERSION_STRING" value="${VERSION_NUM}"/>
  
  <target name="main" depends="android,ios,uploadiOS,uploadAndroid,sendMailios,sendMailAndroid" />
  <target name="buildios" depends="ios_got,uploadiOSSVN" />
  <target name="buildtestflight" depends="ios_testflight,uploadTestFlight,uploadIpaTestFlight" />
  <target name="buildAndroid" depends="android,SuperSdk_android,uploadAndroidSVN" />
  <target name="ios" depends="copylua,compile-ios,SuperSdk_ios" />
  <target name="ios_got" depends="copylua,compile-ios" />
  <target name="ios_testflight" depends="copylua,compile-testflight" />
  <!-- <target name="ios_cehua" depends="fetch-update-code,copylua,compile-ios,SuperSdk" /> -->
  <target name="android" depends="compile-android" />

  <target name="clean_ios">
    <echo message="Cleaning Build Space"/>
    <delete file="${build.log}"/>
    <delete dir="${build.dir}/iPhone"/>
    <mkdir dir="${build.dir}/iPhone"/>
  </target>
  <target name="clean_android">
    <echo message="Cleaning Build Space"/>
    <delete file="${build.log}"/>
    <delete dir="${build.dir}/android"/>
    <mkdir dir="${build.dir}/android"/>
  </target>

  <target name="ios_res" >
    <echo message="Compiling unity project for Res version ${env.iosResVer}"/>
    <echo message="${unity.bin} -projectPath ${dev.dir.absolute} -executeMethod QuickUnity.AssetBundleBuildPanel.Build -version ${env.iosResVer} -pack ${pack}"/>
    <echo message="打包资源"/>
    <exec executable="${unity.bin}" failonerror="true">
      <arg line="-projectPath ${dev.dir.absolute}"/>
      <arg line="-executeMethod QuickUnity.AssetBundleBuildPanel.Build -version ${env.iosResVer} -pack ${pack} -channel ${channel} "/>
      <arg line="-logFile ${build.log}"/>
      <arg line="-batchmode"/>
      <arg line="-buildTarget ios"/>
      <arg line="-quit"/>
    </exec>

    <echo message="上传资源包"/>
    <exec dir="${settings.dir}" executable="/bin/bash" failonerror="true">
      <arg value="deploy.sh"/>
      <arg value="${ios.patch}/"/>
    </exec>

    <echo message="修改json配置文件"/>
    <exec executable="/usr/bin/python" failonerror="true">
      <arg value="${settings.dir}/modify.py"/>
      <arg value="iOS"/>
      <arg value="resVer"/>
      <arg value="${env.iosResVer}"/>
      <arg value="${channel}"/>
    </exec>

    <echo message="上传json配置文件"/>
    <exec dir="${settings.dir}" executable="/bin/bash" failonerror="true">
      <arg value="up.sh"/>
      <arg value="${publish}/"/>
      <arg value="server"/>
      <arg value=".json"/>
    </exec>
  </target>

  <target name="compile-unity" depends="copyRes,uoloadConfig,CommandLineBuild,modifyVersion" >
    <echo message="Compiling unity project for App version ${env.iosAppVer}"/>
  </target>

  <target name="compile-unity-testflight" depends="copyRes,uoloadConfig,CommandLineBuildTestFlight,modifyVersion" >
    <echo message="Compiling unity project for App version ${env.iosAppVer}"/>
  </target>

  <target name="modifyVersion" >
    <echo message="修改版本号"/>
    <exec executable="/usr/libexec/PlistBuddy" failonerror="true">
      <arg line="-c"/>
      <arg value="Set :CFBundleShortVersionString ${env.iosAppVer}" />
      <arg value="${build.dir}/iPhone/Info.plist"/>
    </exec>
  </target>

  <target name= "copyRes">
    <echo message="${unity.bin} -projectPath ${dev.dir.absolute} -executeMethod QuickUnity.AssetBundleBuildPanel.CopyRes -copyRes ${copyRes} -version ${env.iosAppVer} -channel ${channel}"/>
    <echo message="打包资源"/>
    <exec executable="${unity.bin}" failonerror="true">
      <arg line="-projectPath ${dev.dir.absolute}"/>
      <arg line="-executeMethod QuickUnity.AssetBundleBuildPanel.CopyRes -copyRes ${copyRes} -version ${env.iosAppVer} -channel ${channel}"/>
      <arg line="-logFile ${build.log}"/>
      <arg line="-batchmode"/>
      <arg line="-buildTarget ios"/>
      <arg line="-quit"/>
    </exec>
  </target>

  <target name="uoloadConfig" >
    <echo message="修改json配置文件"/>
    <exec executable="/usr/bin/python" failonerror="true">
      <arg value="${settings.dir}/modify.py"/>
      <arg value="iOS"/>
      <arg value="appVer"/>
      <arg value="${env.iosAppVer}"/>
      <arg value="${channel}"/>
    </exec>
    
    <exec executable="/usr/bin/python" failonerror="true">
      <arg value="${settings.dir}/modify.py"/>
      <arg value="iOS"/>
      <arg value="appRange"/>
      <arg value="${env.iosAppVer}-${env.iosAppVer}"/>
      <arg value="${channel}"/>
    </exec>

    <echo message="上传json配置文件"/>
    <exec dir="${settings.dir}" executable="/bin/bash" failonerror="true">
      <arg value="up.sh"/>
      <arg value="${publish}/"/>
      <arg value="server"/>
      <arg value=".json"/>
    </exec>
  </target>
  <target name="CommandLineBuild" >
    <echo message="${unity.bin} -projectPath ${dev.dir.absolute} -executeMethod PerformBuild.CommandLineBuild -identifier ${identifier} -batchmode -quit"/>
    <exec executable="${unity.bin}" failonerror="true">
      <arg line="-projectPath ${dev.dir.absolute}"/>
      <arg line="-executeMethod PerformBuild.CommandLineBuild -identifier ${identifier} -channel ${channel}"/>
      <arg line="-logFile ${build.log}"/>
      <arg line="-batchmode"/>
      <arg line="-quit"/>
    </exec>
  </target>

  <target name="CommandLineBuildTestFlight" >
    <echo message="${unity.bin} -projectPath ${dev.dir.absolute} -executeMethod PerformBuild.CommandLineBuild -identifier ${testflightidentifier} -batchmode -quit"/>
    <exec executable="${unity.bin}" failonerror="true">
      <arg line="-projectPath ${dev.dir.absolute}"/>
      <arg line="-executeMethod PerformBuild.CommandLineBuild -identifier ${testflightidentifier}"/>
      <arg line="-logFile ${build.log}"/>
      <arg line="-batchmode"/>
      <arg line="-quit"/>
    </exec>
  </target>

  <target name="compile-ios" depends="clean_ios,compile-unity">
    <replace file="${build.dir}/iPhone/Info.plist" preservelastmodified="true">
      <replacefilter token="999.999.999" value="${VERSION_NUM}" />
    </replace>
    <exec executable="${security.bin}" failonerror="true">
      <arg value="unlock-keychain"/>
      <arg line="-p ${keychain.password}"/>
    </exec>

    <echo message="Building ${build.dir}/iPhone/Unity-iPhone.xcodeproj/ Sym Root ${build.dir}/iPhone/"/>
    <echo message="${xcode.bin} clean build -project ${build.dir}/iPhone/Unity-iPhone.xcodeproj/ -scheme Unity-iPhone -sdk iphoneos -configuration Release DEVELOPMENT_TEAM='${delevop.team}' archive -archivePath ${build.dir}/iPhone/${APP_NAME}.xcarchive " />
    <exec executable="${xcode.bin}" failonerror="true">
      <arg line="clean build"/>
      <arg line="-project ${build.dir}/iPhone/Unity-iPhone.xcodeproj/"/>
      <arg line='-scheme Unity-iPhone '/>
      <arg line="-sdk iphoneos"/>
      <arg line="-configuration Release"/>
      <arg line='DEVELOPMENT_TEAM="${delevop.team}"'/>
      <arg line='archive -archivePath ${build.dir}/iPhone/${APP_NAME}.xcarchive'/> 
    </exec>
    
    <exec executable="${security.bin}" failonerror="true">
      <arg value="unlock-keychain"/>
      <arg line="-p ${keychain.password}"/>
    </exec>
    
    <echo message="${xcode.bin} -exportArchive -archivePath ${build.dir}/iPhone/${APP_NAME}.xcarchive -exportPath ${build.dir}/iPhone/build/Release-iphoneos/ -exportOptionsPlist ${plist} -allowProvisioningUpdates "/>
    <exec executable="${xcode.bin}" failonerror="true">
      <arg line="-exportArchive"/>
      <arg line="-archivePath ${build.dir}/iPhone/${APP_NAME}.xcarchive" />
      <arg line="-exportPath ${build.dir}/iPhone/build/Release-iphoneos/"/>
      <arg line="-exportOptionsPlist ${plist}"/>
      <arg line="-allowProvisioningUpdates" />
    </exec>

    <copy file="${build.dir}/iPhone/build/Release-iphoneos/Unity-iPhone.ipa" tofile="${ios.deploy}/${env.iosAppVer}.ipa"/>
    <echo message="修改plist"/>
    <exec executable="/usr/bin/python" failonerror="true">
      <arg value="${settings.dir}/modifyPlist.py"/>
      <arg value="${env.iosAppVer}"/>
      <arg value="${channel}"/>
    </exec>
     <echo message="上传plist"/>
    <exec dir="${settings.dir}" executable="/bin/bash" failonerror="true">
      <arg value="up.sh"/>
      <arg value="${publish}/${env.iosAppVer}.plist"/>
    </exec>
    <echo message="修改html"/>
    <exec executable="/usr/bin/python" failonerror="true">
      <arg value="${settings.dir}/modifyHtml.py"/>
      <arg value="iOS"/>
      <arg value="${env.iosAppVer}"/>
      <arg value="${channel}"/>
    </exec>
    <echo message="上传html"/>
    <exec dir="${settings.dir}" executable="/bin/bash" failonerror="true">
      <arg value="up.sh"/>
      <arg value="${publish}/index.html"/>
    </exec>
   <!--  <exec executable="/usr/bin/python" failonerror="true">
      <arg value="${settings.dir}/uploadHtml.py"/>
      <arg value="${publish}/index.html"/>
    </exec> -->
  </target>

  <target name="compile-testflight" depends="clean_ios,compile-unity-testflight">
    <exec executable="${security.bin}" failonerror="true">
      <arg value="unlock-keychain"/>
      <arg line="-p ${keychain.password}"/>
    </exec>
    
    <echo message="Building ${build.dir}/iPhone/Unity-iPhone.xcodeproj/ Sym Root ${build.dir}/iPhone/"/>
    <exec executable="${xcode.bin}" failonerror="true">
      <arg line="clean build"/>
      <arg line="-project ${build.dir}/iPhone/Unity-iPhone.xcodeproj/"/>
      <arg line='-scheme Unity-iPhone '/>
      <arg line="-sdk iphoneos"/>
      <arg line="-configuration Release"/>
      <arg line='DEVELOPMENT_TEAM="${testflight.team}"'/>
      <arg line='archive -archivePath ${build.dir}/iPhone/${APP_NAME}.xcarchive'/> 
    </exec>
    
    <exec executable="${security.bin}" failonerror="true">
      <arg value="unlock-keychain"/>
      <arg line="-p ${keychain.password}"/>
    </exec>
    
    <exec executable="${xcode.bin}" failonerror="true">
      <arg line="-exportArchive"/>
      <arg line="-archivePath ${build.dir}/iPhone/${APP_NAME}.xcarchive" />
      <arg line="-exportPath ${build.dir}/iPhone/build/Release-iphoneos/"/>
      <arg line="-exportOptionsPlist ${tfplist}"/>
      <arg line="-allowProvisioningUpdates" />
    </exec>

    <copy file="${build.dir}/iPhone/build/Release-iphoneos/Unity-iPhone.ipa" tofile="${testflight.deploy}/${env.iosAppVer}.ipa"/>
  </target>

  <target name="uploadTestFlight">
    <exec executable="${altool.bin}" failonerror="true">
      <arg value="--validate-app"/>
      <arg line="-f ${testflight.deploy}/last.ipa"/>
      <arg line="-u fbzykb@qq.com"/>
      <arg line="-p Fbzykb@2016"/>
      <arg line="-t ios"/>
      <arg line="--output-format xml"/>
    </exec>

    <exec executable="${altool.bin}" failonerror="true">
      <arg value="--upload-app"/>
      <arg line="-f ${testflight.deploy}/last.ipa"/>
      <arg line="-u fbzykb@qq.com"/>
      <arg line="-p Fbzykb@2016"/>
      <arg line="-t ios"/>
      <arg line="--output-format xml"/>
    </exec>
  </target>

  <target name="copylua">
    <echo message="Copy  Lua Scripts"/>
    <echo message="${unity.bin} -projectPath ${dev.dir.absolute} -executeMethod QuickUnity.AssetBundleBuildPanel.CopyLuaToSources -batchmode -quit"/>
      <exec executable="${unity.bin}" failonerror="true">
      <arg line="-projectPath ${dev.dir.absolute}"/>
      <arg line="-executeMethod QuickUnity.AssetBundleBuildPanel.CopyLuaToSources"/>
      <arg line="-logFile ${build.log}"/>
      <arg line="-batchmode"/>
      <arg line="-quit"/>
    </exec>
  </target>

  <!-- Execute svn update command -->
  <target name="fetch-update-code" description="Fetches update code from base/current working repository" >
      <exec dir="${settings.dir}" executable="/bin/bash" failonerror="true">
        <arg value="svnUpdate.sh"/>
      </exec>
  </target>

  <target name ="SuperSdk_ios">
    <echo message = "supersdk 打包！！" />
    <exec executable= "${SuperSDK_Mac.bin}" failonerror="true">
       <arg line=" p 196377770 extMmdJRUV3kjeDAWl2iKKsSP7wIfSVx"/>
       <arg line= "-pn 游族-企业"/>
       <arg line= "-s ${build.dir}/iPhone/Unity-iPhone.xcodeproj"/>
       <arg line= "-o ${build.dir}/iPhone/build/Release-iphoneos/"/>
    </exec>
    <first id="first">
        <fileset dir="${build.dir}/iPhone/build/Release-iphoneos/" includes="*.ipa" />
    </first>
    <echo message="${toString:first}" />
    <copy file="${toString:first}" tofile="${ios.deploy}/${env.iosAppVer}.ipa"/>
  </target>

  <target name="android_res" >
    <echo message="Compiling unity project for android version ${env.androidResVer}"/>
    <echo message="${unity.bin} -projectPath ${dev.dir.absolute} -executeMethod QuickUnity.AssetBundleBuildPanel.Build -version ${env.androidResVer} -pack ${pack}"/>
    <echo message="打包资源"/>
    <exec executable="${unity.bin}" failonerror="true">
      <arg line="-projectPath ${dev.dir.absolute}"/>
      <arg line="-executeMethod QuickUnity.AssetBundleBuildPanel.Build -version ${env.androidResVer} -pack ${pack} -channel ${channel}"/>
      <arg line="-logFile ${build.log}"/>
      <arg line="-batchmode"/>
      <arg line="-buildTarget android"/>
      <arg line="-quit"/>
    </exec>
      
    <echo message="上传资源包 ${android.patch}"/>
    <exec dir="${settings.dir}" executable="/bin/bash" failonerror="true">
      <arg value="deploy.sh"/>
      <arg value="${android.patch}/"/>
    </exec>

    <echo message="修改json配置文件 ${channel}"/>
    <exec executable="/usr/bin/python" failonerror="true">
      <arg value="${settings.dir}/modify.py"/>
      <arg value="Android"/>
      <arg value="resVer"/>
      <arg value="${env.androidResVer}"/>
      <arg value="${channel}"/>
    </exec>

    <echo message="上传json配置文件"/>
    <exec dir="${settings.dir}" executable="/bin/bash" failonerror="true">
      <arg value="up.sh"/>
      <arg value="${publish}/"/>
      <arg value="server"/>
      <arg value=".json"/>
    </exec>

  </target>
  <target name="compile-android" depends="clean_android">
    <echo message="Compiling unity project for android version ${env.androidAppVer}"/>
    <echo message="${unity.bin} -projectPath ${dev.dir.absolute} -executeMethod QuickUnity.AssetBundleBuildPanel.CopyRes -copyRes ${copyRes}"/>
    <echo message="打包资源"/>
    <exec executable="${unity.bin}" failonerror="true">
      <arg line="-projectPath ${dev.dir.absolute}"/>
      <arg line="-executeMethod QuickUnity.AssetBundleBuildPanel.CopyRes -copyRes ${copyRes} -version ${env.androidAppVer} -channel ${channel}"/>
      <arg line="-logFile ${build.log}"/>
      <arg line="-batchmode"/>
      <arg line="-buildTarget android"/>
      <arg line="-quit"/>
    </exec>

    <echo message="${unity.bin} -projectPath ${dev.dir.absolute} -executeMethod PerformBuild.CommandLineBuildAndroid -batchmode -quit"/>
    <exec executable="${unity.bin}" failonerror="true">
      <arg line="-projectPath ${dev.dir.absolute}"/>
      <arg line="-executeMethod PerformBuild.CommandLineBuildAndroid -identifier ${identifier} -channel ${channel}"/>
      <arg line="-logFile ${build.log}"/>
      <arg line="-batchmode"/>
      <arg line="-quit"/>
    </exec>

    <echo message="修改json配置文件"/>
    <exec executable="/usr/bin/python" failonerror="true">
      <arg value="${settings.dir}/modify.py"/>
      <arg value="Android"/>
      <arg value="appVer"/>
      <arg value="${env.androidAppVer}"/>
      <arg value="${channel}"/>
    </exec>
    <exec executable="/usr/bin/python" failonerror="true">
      <arg value="${settings.dir}/modify.py"/>
      <arg value="Android"/>
      <arg value="appRange"/>
      <arg value="${env.androidAppVer}-${env.androidAppVer}"/>
      <arg value="${channel}"/> 
    </exec>

    <echo message="上传json配置文件"/>
    <exec dir="${settings.dir}" executable="/bin/bash" failonerror="true">
      <arg value="up.sh"/>
      <arg value="${publish}/"/>
      <arg value="server"/>
      <arg value=".json"/>
    </exec>
    <copy file="${build.dir}/android/android.apk" tofile="${android.deploy}/${env.androidAppVer}.apk"/>
    <if>
      <equals arg1="${encrypt}" arg2="true"/>  
      <then> 
        <exec dir="${settings.dir}/upet" executable="/bin/bash" failonerror="true">
          <arg value="encrypt.sh"/>
          <arg value="${android.deploy}/${env.androidAppVer}.apk"/>
          <arg value="${android.deploy}/${env.androidAppVer}.apk"/>
          <arg value="/Users/chenshizhan/Documents/client/client/trunk/IceFire/gotwintercoming.keystore"/>
          <arg value="123456"/>
          <arg value="123456"/>
        </exec>
      </then>
    </if>
    <echo message="修改html"/>
    <exec executable="/usr/bin/python" failonerror="true">
      <arg value="${settings.dir}/modifyHtml.py"/>
      <arg value="Android"/>
      <arg value="${env.androidAppVer}"/>
      <arg value="${channel}"/>
    </exec>
    <echo message="上传html"/>
    <exec dir="${settings.dir}" executable="/bin/bash" failonerror="true">
      <arg value="up.sh"/>
      <arg value="${publish}/index.html"/>
    </exec>
<!--     <exec executable="/usr/bin/python" failonerror="true">
      <arg value="${settings.dir}/uploadHtml.py"/>
      <arg value="${publish}/index.html"/>
    </exec> -->
  </target>

  <target name ="SuperSdk_android">
    <echo message = "supersdk 打包！！" />
    <exec executable= "${SuperSDK_Mac.bin}" failonerror="true">
       <arg line=" p 196377769 extMmdJRUV3kjeDAWl2iKKsSP7wIfSVx"/>
       <arg line= "-pn 游族"/>
       <arg line= "-s ${android.deploy}/${env.androidAppVer}.apk"/>
       <arg line= "-o ${android.deploy}"/>
    </exec>
    <first id="first">
        <fileset dir="${android.deploy}/" includes="*.apk" />
    </first>
    <echo message="${toString:first}" />
    <copy file="${toString:first}" tofile="${android.deploy}/${env.androidAppVer}.apk"/>
  </target>
  
  <target name="zipDsym">
    <echo message="压缩dsym文件"/>
    <exec executable="zip" dir="${build.dir}/iPhone/build/Release-iphoneos" failonerror="true">
      <arg value="-r"/>
      <arg value="${APP_NAME}.app.dSYM.zip"/>
      <arg value="${APP_NAME}.app.dSYM"/>
    </exec>
  </target>
  
  <target name="uploadiOSSVN" description="上传生成的ipa文件到svn服务器">
      <exec dir="${settings.dir}" executable="/bin/bash" failonerror="true">
        <arg value="up.sh"/>
        <arg value="${ios.deploy}/"/>
        <arg value="${env.iosAppVer}"/>
        <arg value=".ipa"/>
      </exec>
  </target>
  <target name="uploadIpaTestFlight" description="上传生成的ipa文件到svn服务器">
      <exec dir="${settings.dir}" executable="/bin/bash" failonerror="true">
        <arg value="up.sh"/>
        <arg value="${testflight.deploy}/"/>
        <arg value="last"/>
        <arg value=".ipa"/>
      </exec>
  </target>
  <target name="uploadiOS">
    <echo message="上传生成的ipa文件到ftp服务器"/>
<!--     <exec executable="/usr/bin/python" failonerror="true">
      <arg value="${settings.dir}/up.py"/>
      <arg value="/static/ios"/>
      <arg value="${ios.deploy}/"/>
      <arg value="${VERSION_STRING}"/>
      <arg value=".ipa"/>
    </exec> -->
     <exec dir="${settings.dir}" executable="/bin/bash" failonerror="true">
      <arg value="deploy.sh"/>
      <arg value="${ios.deploy}/"/>
    </exec>
  </target>
  <target name="encryptAndroid" description="加密android dll" >
    <exec dir="${settings.dir}" executable="/bin/bash" failonerror="true">
        <arg value="up.sh"/>
        <arg value="${android.deploy}/"/>
        <arg value="${env.androidAppVer}"/>
        <arg value=".apk"/>
    </exec>
  </target>
  <target name="uploadAndroidSVN" description="上传生成的ipa文件到svn服务器">
      <exec dir="${settings.dir}" executable="/bin/bash" failonerror="true">
        <arg value="up.sh"/>
        <arg value="${android.deploy}/"/>
        <arg value="${env.androidAppVer}"/>
        <arg value=".apk"/>
      </exec>
  </target>

  <target name="uploadAndroid">
    <echo message="上传生成的APK文件到ftp服务器"/>
    <!-- <exec executable="/usr/bin/python" failonerror="true">
      <arg value="${settings.dir}/up.py"/>
      <arg value="/static/android"/>
      <arg value="${android.deploy}/"/>
      <arg value="${VERSION_STRING}"/>
      <arg value=".apk"/>
    </exec> -->
     <exec dir="${settings.dir}" executable="/bin/bash" failonerror="true">
      <arg value="deploy.sh"/>
      <arg value="${android.deploy}/"/>
    </exec>
  </target>
  <target name="sendMailios">
    <echo message="发送邮件"/>
    <exec executable="/usr/bin/python" failonerror="true">
      <arg value="${settings.dir}/upload.py"/>
      <arg value="${VERSION_STRING}"/>
      <arg value="ios"/>
    </exec>
  </target>
  <target name="sendMailAndroid">
    <echo message="发送邮件"/>
    <exec executable="/usr/bin/python" failonerror="true">
      <arg value="${settings.dir}/upload.py"/>
      <arg value="${VERSION_STRING}"/>
      <arg value="android"/>
    </exec>
  </target>
</project>
